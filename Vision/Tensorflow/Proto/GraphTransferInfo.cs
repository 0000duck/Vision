// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_transfer_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vision.Tensorflow.Proto {

  /// <summary>Holder for reflection information generated from graph_transfer_info.proto</summary>
  public static partial class GraphTransferInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for graph_transfer_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GraphTransferInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlncmFwaF90cmFuc2Zlcl9pbmZvLnByb3RvEgp0ZW5zb3JmbG93Ggt0eXBl",
            "cy5wcm90byKrCQoRR3JhcGhUcmFuc2ZlckluZm8SOQoJbm9kZV9pbmZvGAEg",
            "AygLMiYudGVuc29yZmxvdy5HcmFwaFRyYW5zZmVySW5mby5Ob2RlSW5mbxJE",
            "Cg9jb25zdF9ub2RlX2luZm8YAiADKAsyKy50ZW5zb3JmbG93LkdyYXBoVHJh",
            "bnNmZXJJbmZvLkNvbnN0Tm9kZUluZm8SRAoPbm9kZV9pbnB1dF9pbmZvGAMg",
            "AygLMisudGVuc29yZmxvdy5HcmFwaFRyYW5zZmVySW5mby5Ob2RlSW5wdXRJ",
            "bmZvEkYKEG5vZGVfb3V0cHV0X2luZm8YBCADKAsyLC50ZW5zb3JmbG93Lkdy",
            "YXBoVHJhbnNmZXJJbmZvLk5vZGVPdXRwdXRJbmZvEk8KFWdyYXBoX2lucHV0",
            "X25vZGVfaW5mbxgFIAMoCzIwLnRlbnNvcmZsb3cuR3JhcGhUcmFuc2Zlcklu",
            "Zm8uR3JhcGhJbnB1dE5vZGVJbmZvElEKFmdyYXBoX291dHB1dF9ub2RlX2lu",
            "Zm8YBiADKAsyMS50ZW5zb3JmbG93LkdyYXBoVHJhbnNmZXJJbmZvLkdyYXBo",
            "T3V0cHV0Tm9kZUluZm8SPgoLZGVzdGluYXRpb24YByABKA4yKS50ZW5zb3Jm",
            "bG93LkdyYXBoVHJhbnNmZXJJbmZvLkRlc3RpbmF0aW9uGjEKCU5vZGVJbnB1",
            "dBIPCgdub2RlX2lkGAEgASgFEhMKC291dHB1dF9wb3J0GAIgASgFGo4BCghO",
            "b2RlSW5mbxIMCgRuYW1lGAEgASgJEg8KB25vZGVfaWQYAiABKAUSEQoJdHlw",
            "ZV9uYW1lGAMgASgJEhEKCXNvY19vcF9pZBgEIAEoBRISCgpwYWRkaW5nX2lk",
            "GAUgASgFEhMKC2lucHV0X2NvdW50GAYgASgFEhQKDG91dHB1dF9jb3VudBgH",
            "IAEoBRpwCg1Db25zdE5vZGVJbmZvEgwKBG5hbWUYASABKAkSDwoHbm9kZV9p",
            "ZBgCIAEoBRINCgVzaGFwZRgDIAMoAxIMCgRkYXRhGAQgASgMEiMKBWR0eXBl",
            "GAUgASgOMhQudGVuc29yZmxvdy5EYXRhVHlwZRpdCg1Ob2RlSW5wdXRJbmZv",
            "Eg8KB25vZGVfaWQYASABKAUSOwoKbm9kZV9pbnB1dBgCIAMoCzInLnRlbnNv",
            "cmZsb3cuR3JhcGhUcmFuc2ZlckluZm8uTm9kZUlucHV0GjgKDk5vZGVPdXRw",
            "dXRJbmZvEg8KB25vZGVfaWQYASABKAUSFQoNbWF4X2J5dGVfc2l6ZRgCIAMo",
            "BRpWChJHcmFwaElucHV0Tm9kZUluZm8SDAoEbmFtZRgBIAEoCRINCgVzaGFw",
            "ZRgCIAMoAxIjCgVkdHlwZRgDIAEoDjIULnRlbnNvcmZsb3cuRGF0YVR5cGUa",
            "VwoTR3JhcGhPdXRwdXROb2RlSW5mbxIMCgRuYW1lGAEgASgJEg0KBXNoYXBl",
            "GAIgAygDEiMKBWR0eXBlGAMgASgOMhQudGVuc29yZmxvdy5EYXRhVHlwZSIj",
            "CgtEZXN0aW5hdGlvbhIHCgNOT1AQABILCgdIRVhBR09OEAFCNwoYb3JnLnRl",
            "bnNvcmZsb3cuZnJhbWV3b3JrQhZHcmFwaFRyYW5zZmVySW5mb1Byb3RvUAH4",
            "AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Vision.Tensorflow.Proto.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Parser, new[]{ "NodeInfo", "ConstNodeInfo", "NodeInputInfo", "NodeOutputInfo", "GraphInputNodeInfo", "GraphOutputNodeInfo", "Destination" }, null, new[]{ typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.Destination) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput.Parser, new[]{ "NodeId", "OutputPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo.Parser, new[]{ "Name", "NodeId", "TypeName", "SocOpId", "PaddingId", "InputCount", "OutputCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo.Parser, new[]{ "Name", "NodeId", "Shape", "Data", "Dtype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo.Parser, new[]{ "NodeId", "NodeInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo.Parser, new[]{ "NodeId", "MaxByteSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo.Parser, new[]{ "Name", "Shape", "Dtype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo), global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo.Parser, new[]{ "Name", "Shape", "Dtype" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Protocol buffer representing a handle to a tensorflow resource. Handles are
  /// not valid across executions, but can be serialized back and forth from within
  /// a single run.
  /// </summary>
  public sealed partial class GraphTransferInfo : pb::IMessage<GraphTransferInfo> {
    private static readonly pb::MessageParser<GraphTransferInfo> _parser = new pb::MessageParser<GraphTransferInfo>(() => new GraphTransferInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTransferInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vision.Tensorflow.Proto.GraphTransferInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTransferInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTransferInfo(GraphTransferInfo other) : this() {
      nodeInfo_ = other.nodeInfo_.Clone();
      constNodeInfo_ = other.constNodeInfo_.Clone();
      nodeInputInfo_ = other.nodeInputInfo_.Clone();
      nodeOutputInfo_ = other.nodeOutputInfo_.Clone();
      graphInputNodeInfo_ = other.graphInputNodeInfo_.Clone();
      graphOutputNodeInfo_ = other.graphOutputNodeInfo_.Clone();
      destination_ = other.destination_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTransferInfo Clone() {
      return new GraphTransferInfo(this);
    }

    /// <summary>Field number for the "node_info" field.</summary>
    public const int NodeInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo> _repeated_nodeInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo> nodeInfo_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInfo> NodeInfo {
      get { return nodeInfo_; }
    }

    /// <summary>Field number for the "const_node_info" field.</summary>
    public const int ConstNodeInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo> _repeated_constNodeInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo> constNodeInfo_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.ConstNodeInfo> ConstNodeInfo {
      get { return constNodeInfo_; }
    }

    /// <summary>Field number for the "node_input_info" field.</summary>
    public const int NodeInputInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo> _repeated_nodeInputInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo.Parser);
    private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo> nodeInputInfo_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInputInfo> NodeInputInfo {
      get { return nodeInputInfo_; }
    }

    /// <summary>Field number for the "node_output_info" field.</summary>
    public const int NodeOutputInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo> _repeated_nodeOutputInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo.Parser);
    private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo> nodeOutputInfo_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeOutputInfo> NodeOutputInfo {
      get { return nodeOutputInfo_; }
    }

    /// <summary>Field number for the "graph_input_node_info" field.</summary>
    public const int GraphInputNodeInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo> _repeated_graphInputNodeInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo> graphInputNodeInfo_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo>();
    /// <summary>
    /// Input Node parameters of transferred graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphInputNodeInfo> GraphInputNodeInfo {
      get { return graphInputNodeInfo_; }
    }

    /// <summary>Field number for the "graph_output_node_info" field.</summary>
    public const int GraphOutputNodeInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo> _repeated_graphOutputNodeInfo_codec
        = pb::FieldCodec.ForMessage(50, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo> graphOutputNodeInfo_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.GraphOutputNodeInfo> GraphOutputNodeInfo {
      get { return graphOutputNodeInfo_; }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 7;
    private global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.Destination destination_ = 0;
    /// <summary>
    /// Destination of graph transfer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.Destination Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTransferInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTransferInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeInfo_.Equals(other.nodeInfo_)) return false;
      if(!constNodeInfo_.Equals(other.constNodeInfo_)) return false;
      if(!nodeInputInfo_.Equals(other.nodeInputInfo_)) return false;
      if(!nodeOutputInfo_.Equals(other.nodeOutputInfo_)) return false;
      if(!graphInputNodeInfo_.Equals(other.graphInputNodeInfo_)) return false;
      if(!graphOutputNodeInfo_.Equals(other.graphOutputNodeInfo_)) return false;
      if (Destination != other.Destination) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeInfo_.GetHashCode();
      hash ^= constNodeInfo_.GetHashCode();
      hash ^= nodeInputInfo_.GetHashCode();
      hash ^= nodeOutputInfo_.GetHashCode();
      hash ^= graphInputNodeInfo_.GetHashCode();
      hash ^= graphOutputNodeInfo_.GetHashCode();
      if (Destination != 0) hash ^= Destination.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeInfo_.WriteTo(output, _repeated_nodeInfo_codec);
      constNodeInfo_.WriteTo(output, _repeated_constNodeInfo_codec);
      nodeInputInfo_.WriteTo(output, _repeated_nodeInputInfo_codec);
      nodeOutputInfo_.WriteTo(output, _repeated_nodeOutputInfo_codec);
      graphInputNodeInfo_.WriteTo(output, _repeated_graphInputNodeInfo_codec);
      graphOutputNodeInfo_.WriteTo(output, _repeated_graphOutputNodeInfo_codec);
      if (Destination != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Destination);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeInfo_.CalculateSize(_repeated_nodeInfo_codec);
      size += constNodeInfo_.CalculateSize(_repeated_constNodeInfo_codec);
      size += nodeInputInfo_.CalculateSize(_repeated_nodeInputInfo_codec);
      size += nodeOutputInfo_.CalculateSize(_repeated_nodeOutputInfo_codec);
      size += graphInputNodeInfo_.CalculateSize(_repeated_graphInputNodeInfo_codec);
      size += graphOutputNodeInfo_.CalculateSize(_repeated_graphOutputNodeInfo_codec);
      if (Destination != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Destination);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTransferInfo other) {
      if (other == null) {
        return;
      }
      nodeInfo_.Add(other.nodeInfo_);
      constNodeInfo_.Add(other.constNodeInfo_);
      nodeInputInfo_.Add(other.nodeInputInfo_);
      nodeOutputInfo_.Add(other.nodeOutputInfo_);
      graphInputNodeInfo_.Add(other.graphInputNodeInfo_);
      graphOutputNodeInfo_.Add(other.graphOutputNodeInfo_);
      if (other.Destination != 0) {
        Destination = other.Destination;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodeInfo_.AddEntriesFrom(input, _repeated_nodeInfo_codec);
            break;
          }
          case 18: {
            constNodeInfo_.AddEntriesFrom(input, _repeated_constNodeInfo_codec);
            break;
          }
          case 26: {
            nodeInputInfo_.AddEntriesFrom(input, _repeated_nodeInputInfo_codec);
            break;
          }
          case 34: {
            nodeOutputInfo_.AddEntriesFrom(input, _repeated_nodeOutputInfo_codec);
            break;
          }
          case 42: {
            graphInputNodeInfo_.AddEntriesFrom(input, _repeated_graphInputNodeInfo_codec);
            break;
          }
          case 50: {
            graphOutputNodeInfo_.AddEntriesFrom(input, _repeated_graphOutputNodeInfo_codec);
            break;
          }
          case 56: {
            destination_ = (global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.Destination) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GraphTransferInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Destination {
        [pbr::OriginalName("NOP")] Nop = 0,
        [pbr::OriginalName("HEXAGON")] Hexagon = 1,
      }

      public sealed partial class NodeInput : pb::IMessage<NodeInput> {
        private static readonly pb::MessageParser<NodeInput> _parser = new pb::MessageParser<NodeInput>(() => new NodeInput());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NodeInput> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInput() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInput(NodeInput other) : this() {
          nodeId_ = other.nodeId_;
          outputPort_ = other.outputPort_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInput Clone() {
          return new NodeInput(this);
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 1;
        private int nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        /// <summary>Field number for the "output_port" field.</summary>
        public const int OutputPortFieldNumber = 2;
        private int outputPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OutputPort {
          get { return outputPort_; }
          set {
            outputPort_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NodeInput);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NodeInput other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeId != other.NodeId) return false;
          if (OutputPort != other.OutputPort) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NodeId != 0) hash ^= NodeId.GetHashCode();
          if (OutputPort != 0) hash ^= OutputPort.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NodeId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(NodeId);
          }
          if (OutputPort != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(OutputPort);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NodeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
          }
          if (OutputPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputPort);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NodeInput other) {
          if (other == null) {
            return;
          }
          if (other.NodeId != 0) {
            NodeId = other.NodeId;
          }
          if (other.OutputPort != 0) {
            OutputPort = other.OutputPort;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NodeId = input.ReadInt32();
                break;
              }
              case 16: {
                OutputPort = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
        private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInfo(NodeInfo other) : this() {
          name_ = other.name_;
          nodeId_ = other.nodeId_;
          typeName_ = other.typeName_;
          socOpId_ = other.socOpId_;
          paddingId_ = other.paddingId_;
          inputCount_ = other.inputCount_;
          outputCount_ = other.outputCount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInfo Clone() {
          return new NodeInfo(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 2;
        private int nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        /// <summary>Field number for the "type_name" field.</summary>
        public const int TypeNameFieldNumber = 3;
        private string typeName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TypeName {
          get { return typeName_; }
          set {
            typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "soc_op_id" field.</summary>
        public const int SocOpIdFieldNumber = 4;
        private int socOpId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SocOpId {
          get { return socOpId_; }
          set {
            socOpId_ = value;
          }
        }

        /// <summary>Field number for the "padding_id" field.</summary>
        public const int PaddingIdFieldNumber = 5;
        private int paddingId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PaddingId {
          get { return paddingId_; }
          set {
            paddingId_ = value;
          }
        }

        /// <summary>Field number for the "input_count" field.</summary>
        public const int InputCountFieldNumber = 6;
        private int inputCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InputCount {
          get { return inputCount_; }
          set {
            inputCount_ = value;
          }
        }

        /// <summary>Field number for the "output_count" field.</summary>
        public const int OutputCountFieldNumber = 7;
        private int outputCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OutputCount {
          get { return outputCount_; }
          set {
            outputCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NodeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NodeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (NodeId != other.NodeId) return false;
          if (TypeName != other.TypeName) return false;
          if (SocOpId != other.SocOpId) return false;
          if (PaddingId != other.PaddingId) return false;
          if (InputCount != other.InputCount) return false;
          if (OutputCount != other.OutputCount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (NodeId != 0) hash ^= NodeId.GetHashCode();
          if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
          if (SocOpId != 0) hash ^= SocOpId.GetHashCode();
          if (PaddingId != 0) hash ^= PaddingId.GetHashCode();
          if (InputCount != 0) hash ^= InputCount.GetHashCode();
          if (OutputCount != 0) hash ^= OutputCount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (NodeId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NodeId);
          }
          if (TypeName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TypeName);
          }
          if (SocOpId != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(SocOpId);
          }
          if (PaddingId != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(PaddingId);
          }
          if (InputCount != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(InputCount);
          }
          if (OutputCount != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(OutputCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (NodeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
          }
          if (TypeName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
          }
          if (SocOpId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SocOpId);
          }
          if (PaddingId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaddingId);
          }
          if (InputCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputCount);
          }
          if (OutputCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NodeInfo other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.NodeId != 0) {
            NodeId = other.NodeId;
          }
          if (other.TypeName.Length != 0) {
            TypeName = other.TypeName;
          }
          if (other.SocOpId != 0) {
            SocOpId = other.SocOpId;
          }
          if (other.PaddingId != 0) {
            PaddingId = other.PaddingId;
          }
          if (other.InputCount != 0) {
            InputCount = other.InputCount;
          }
          if (other.OutputCount != 0) {
            OutputCount = other.OutputCount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                NodeId = input.ReadInt32();
                break;
              }
              case 26: {
                TypeName = input.ReadString();
                break;
              }
              case 32: {
                SocOpId = input.ReadInt32();
                break;
              }
              case 40: {
                PaddingId = input.ReadInt32();
                break;
              }
              case 48: {
                InputCount = input.ReadInt32();
                break;
              }
              case 56: {
                OutputCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ConstNodeInfo : pb::IMessage<ConstNodeInfo> {
        private static readonly pb::MessageParser<ConstNodeInfo> _parser = new pb::MessageParser<ConstNodeInfo>(() => new ConstNodeInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConstNodeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConstNodeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConstNodeInfo(ConstNodeInfo other) : this() {
          name_ = other.name_;
          nodeId_ = other.nodeId_;
          shape_ = other.shape_.Clone();
          data_ = other.data_;
          dtype_ = other.dtype_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConstNodeInfo Clone() {
          return new ConstNodeInfo(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 2;
        private int nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int ShapeFieldNumber = 3;
        private static readonly pb::FieldCodec<long> _repeated_shape_codec
            = pb::FieldCodec.ForInt64(26);
        private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Shape {
          get { return shape_; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 4;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "dtype" field.</summary>
        public const int DtypeFieldNumber = 5;
        private global::Vision.Tensorflow.Proto.DataType dtype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Vision.Tensorflow.Proto.DataType Dtype {
          get { return dtype_; }
          set {
            dtype_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConstNodeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConstNodeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (NodeId != other.NodeId) return false;
          if(!shape_.Equals(other.shape_)) return false;
          if (Data != other.Data) return false;
          if (Dtype != other.Dtype) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (NodeId != 0) hash ^= NodeId.GetHashCode();
          hash ^= shape_.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (Dtype != 0) hash ^= Dtype.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (NodeId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NodeId);
          }
          shape_.WriteTo(output, _repeated_shape_codec);
          if (Data.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Data);
          }
          if (Dtype != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Dtype);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (NodeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
          }
          size += shape_.CalculateSize(_repeated_shape_codec);
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (Dtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConstNodeInfo other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.NodeId != 0) {
            NodeId = other.NodeId;
          }
          shape_.Add(other.shape_);
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          if (other.Dtype != 0) {
            Dtype = other.Dtype;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                NodeId = input.ReadInt32();
                break;
              }
              case 26:
              case 24: {
                shape_.AddEntriesFrom(input, _repeated_shape_codec);
                break;
              }
              case 34: {
                Data = input.ReadBytes();
                break;
              }
              case 40: {
                dtype_ = (global::Vision.Tensorflow.Proto.DataType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class NodeInputInfo : pb::IMessage<NodeInputInfo> {
        private static readonly pb::MessageParser<NodeInputInfo> _parser = new pb::MessageParser<NodeInputInfo>(() => new NodeInputInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NodeInputInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInputInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInputInfo(NodeInputInfo other) : this() {
          nodeId_ = other.nodeId_;
          nodeInput_ = other.nodeInput_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeInputInfo Clone() {
          return new NodeInputInfo(this);
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 1;
        private int nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        /// <summary>Field number for the "node_input" field.</summary>
        public const int NodeInputFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput> _repeated_nodeInput_codec
            = pb::FieldCodec.ForMessage(18, global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput.Parser);
        private readonly pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput> nodeInput_ = new pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Vision.Tensorflow.Proto.GraphTransferInfo.Types.NodeInput> NodeInput {
          get { return nodeInput_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NodeInputInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NodeInputInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeId != other.NodeId) return false;
          if(!nodeInput_.Equals(other.nodeInput_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NodeId != 0) hash ^= NodeId.GetHashCode();
          hash ^= nodeInput_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NodeId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(NodeId);
          }
          nodeInput_.WriteTo(output, _repeated_nodeInput_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NodeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
          }
          size += nodeInput_.CalculateSize(_repeated_nodeInput_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NodeInputInfo other) {
          if (other == null) {
            return;
          }
          if (other.NodeId != 0) {
            NodeId = other.NodeId;
          }
          nodeInput_.Add(other.nodeInput_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NodeId = input.ReadInt32();
                break;
              }
              case 18: {
                nodeInput_.AddEntriesFrom(input, _repeated_nodeInput_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class NodeOutputInfo : pb::IMessage<NodeOutputInfo> {
        private static readonly pb::MessageParser<NodeOutputInfo> _parser = new pb::MessageParser<NodeOutputInfo>(() => new NodeOutputInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NodeOutputInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeOutputInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeOutputInfo(NodeOutputInfo other) : this() {
          nodeId_ = other.nodeId_;
          maxByteSize_ = other.maxByteSize_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeOutputInfo Clone() {
          return new NodeOutputInfo(this);
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 1;
        private int nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        /// <summary>Field number for the "max_byte_size" field.</summary>
        public const int MaxByteSizeFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_maxByteSize_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> maxByteSize_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> MaxByteSize {
          get { return maxByteSize_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NodeOutputInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NodeOutputInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeId != other.NodeId) return false;
          if(!maxByteSize_.Equals(other.maxByteSize_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NodeId != 0) hash ^= NodeId.GetHashCode();
          hash ^= maxByteSize_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NodeId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(NodeId);
          }
          maxByteSize_.WriteTo(output, _repeated_maxByteSize_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NodeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
          }
          size += maxByteSize_.CalculateSize(_repeated_maxByteSize_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NodeOutputInfo other) {
          if (other == null) {
            return;
          }
          if (other.NodeId != 0) {
            NodeId = other.NodeId;
          }
          maxByteSize_.Add(other.maxByteSize_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NodeId = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                maxByteSize_.AddEntriesFrom(input, _repeated_maxByteSize_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class GraphInputNodeInfo : pb::IMessage<GraphInputNodeInfo> {
        private static readonly pb::MessageParser<GraphInputNodeInfo> _parser = new pb::MessageParser<GraphInputNodeInfo>(() => new GraphInputNodeInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GraphInputNodeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphInputNodeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphInputNodeInfo(GraphInputNodeInfo other) : this() {
          name_ = other.name_;
          shape_ = other.shape_.Clone();
          dtype_ = other.dtype_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphInputNodeInfo Clone() {
          return new GraphInputNodeInfo(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int ShapeFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_shape_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Shape {
          get { return shape_; }
        }

        /// <summary>Field number for the "dtype" field.</summary>
        public const int DtypeFieldNumber = 3;
        private global::Vision.Tensorflow.Proto.DataType dtype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Vision.Tensorflow.Proto.DataType Dtype {
          get { return dtype_; }
          set {
            dtype_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GraphInputNodeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GraphInputNodeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!shape_.Equals(other.shape_)) return false;
          if (Dtype != other.Dtype) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= shape_.GetHashCode();
          if (Dtype != 0) hash ^= Dtype.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          shape_.WriteTo(output, _repeated_shape_codec);
          if (Dtype != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Dtype);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += shape_.CalculateSize(_repeated_shape_codec);
          if (Dtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GraphInputNodeInfo other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          shape_.Add(other.shape_);
          if (other.Dtype != 0) {
            Dtype = other.Dtype;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                shape_.AddEntriesFrom(input, _repeated_shape_codec);
                break;
              }
              case 24: {
                dtype_ = (global::Vision.Tensorflow.Proto.DataType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GraphOutputNodeInfo : pb::IMessage<GraphOutputNodeInfo> {
        private static readonly pb::MessageParser<GraphOutputNodeInfo> _parser = new pb::MessageParser<GraphOutputNodeInfo>(() => new GraphOutputNodeInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GraphOutputNodeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vision.Tensorflow.Proto.GraphTransferInfo.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphOutputNodeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphOutputNodeInfo(GraphOutputNodeInfo other) : this() {
          name_ = other.name_;
          shape_ = other.shape_.Clone();
          dtype_ = other.dtype_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphOutputNodeInfo Clone() {
          return new GraphOutputNodeInfo(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int ShapeFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_shape_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Shape {
          get { return shape_; }
        }

        /// <summary>Field number for the "dtype" field.</summary>
        public const int DtypeFieldNumber = 3;
        private global::Vision.Tensorflow.Proto.DataType dtype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Vision.Tensorflow.Proto.DataType Dtype {
          get { return dtype_; }
          set {
            dtype_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GraphOutputNodeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GraphOutputNodeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!shape_.Equals(other.shape_)) return false;
          if (Dtype != other.Dtype) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= shape_.GetHashCode();
          if (Dtype != 0) hash ^= Dtype.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          shape_.WriteTo(output, _repeated_shape_codec);
          if (Dtype != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Dtype);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += shape_.CalculateSize(_repeated_shape_codec);
          if (Dtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GraphOutputNodeInfo other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          shape_.Add(other.shape_);
          if (other.Dtype != 0) {
            Dtype = other.Dtype;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                shape_.AddEntriesFrom(input, _repeated_shape_codec);
                break;
              }
              case 24: {
                dtype_ = (global::Vision.Tensorflow.Proto.DataType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
